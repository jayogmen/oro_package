name: OTA Component Update Deployment

on:
  push:
    branches: [main]
  pull_request:
    types: [closed]
    branches: [main]

env:
  DEPLOY_API_URL: "http://13.232.234.162:5000/api"
  UPDATE_TYPE: "component-update"
  COMPONENT_NAME: "oro_suite"
  GITHUB_REPO: "https://github.com/jayogmen/oro_package.git"

permissions:
  contents: write

jobs:
  validate:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          token: ${{ secrets.GITHUB_TOKEN }}
   
   - name: Validate repository structure

        run: |
          # Get list of all submodules
          SUBMODULES=$(git config --file .gitmodules --get-regexp path | awk '{ print $2 }')
          
          # Validate each submodule
          for submodule in $SUBMODULES; do
            echo "Validating submodule: $submodule"
            
            # Check for ROS2 package structure
            for dir in "include" "launch" "src"; do
              if [ ! -d "$submodule/$dir" ]; then
                echo "Warning: Directory '$submodule/$dir' is missing"
              fi
            done
            
            # Check for essential ROS2 package files
            for file in "CMakeLists.txt" "package.xml"; do
              if [ ! -f "$submodule/$file" ]; then
                echo "Error: Required file '$submodule/$file' is missing"
                exit 1
              fi
            done
          done

  version:
    needs: validate
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump_version.outputs.new_version }}
      commit_hash: ${{ steps.get_commit.outputs.commit_hash }}
      submodule_info: ${{ steps.get_submodule_info.outputs.submodule_info }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: 'recursive'
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Get commit hash
        id: get_commit
        run: |
          COMMIT_HASH=$(git rev-parse HEAD)
          echo "commit_hash=$COMMIT_HASH" >> $GITHUB_OUTPUT

      - name: Get submodule information
        id: get_submodule_info
        run: |
          # Initialize empty JSON object
          echo "submodule_info={}" > temp.json
          
          # Get info for each submodule
          git submodule foreach --quiet '
            SUBNAME=$(basename $(pwd))
            COMMIT=$(git rev-parse HEAD)
            echo "{\"$SUBNAME\": {\"commit\": \"$COMMIT\"}}" > temp_sub.json
            jq -s ".[0] * .[1]" temp.json temp_sub.json > temp_new.json
            mv temp_new.json temp.json
          '
          
          # Set output
          SUBMODULE_INFO=$(cat temp.json)
          echo "submodule_info=$SUBMODULE_INFO" >> $GITHUB_OUTPUT
          rm temp.json temp_sub.json 2>/dev/null || true

      - name: Get latest version
        id: get_latest_version
        run: |
          LATEST_TAG=$(git tag -l "v*" | sort -V | tail -n 1)
          if [ -z "$LATEST_TAG" ]; then
            echo "current_version=0.1.0" >> $GITHUB_OUTPUT
          else
            echo "current_version=${LATEST_TAG#v}" >> $GITHUB_OUTPUT
          fi

      - name: Bump version
        id: bump_version
        run: |
          CURRENT_VERSION=${{ steps.get_latest_version.outputs.current_version }}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          if [ "${{ github.event_name }}" = "push" ]; then
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"
            git tag -a "v$NEW_VERSION" -m "Release version $NEW_VERSION"
            git push origin "v$NEW_VERSION"
          fi

  analyze:
    needs: version
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    outputs:
      modified_files: ${{ steps.check-changes.outputs.modified_files }}
      submodule_changes: ${{ steps.check-submodule-changes.outputs.submodule_changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
          submodules: 'recursive'
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Analyze changes
        id: check-changes
        run: |
          MODIFIED_FILES=$(git diff --name-only HEAD^ HEAD | jq -R -s -c 'split("\n")[:-1]')
          echo "modified_files=$MODIFIED_FILES" >> $GITHUB_OUTPUT

      - name: Check submodule changes
        id: check-submodule-changes
        run: |
          # Initialize empty JSON object
          echo "{}" > changes.json
          
          # Get changes for each submodule
          git submodule foreach --quiet '
            SUBNAME=$(basename $(pwd))
            CHANGES=$(git diff --name-only HEAD^ HEAD 2>/dev/null || echo "new-commit")
            echo "{\"$SUBNAME\": $(echo "$CHANGES" | jq -R -s "split(\"\n\")")}" > sub_changes.json
            jq -s ".[0] * .[1]" changes.json sub_changes.json > new_changes.json
            mv new_changes.json changes.json
          '
          
          # Set output
          SUBMODULE_CHANGES=$(cat changes.json)
          echo "submodule_changes=$SUBMODULE_CHANGES" >> $GITHUB_OUTPUT
          rm changes.json sub_changes.json 2>/dev/null || true

  deploy:
    needs: [version, analyze]
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main')
    runs-on: ubuntu-latest
    steps:
      - name: Create deployment package
        run: |
          # Create metadata for the update
          cat > metadata.json << EOL
          {
            "buildTime": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "gitCommit": "${{ needs.version.outputs.commit_hash }}",
            "branch": "main",
            "workflow": "component-update",
            "version": "${{ needs.version.outputs.new_version }}",
            "modifiedFiles": ${{ needs.analyze.outputs.modified_files }},
            "submodules": ${{ needs.version.outputs.submodule_info }},
            "submoduleChanges": ${{ needs.analyze.outputs.submodule_changes }}
          }
          EOL

      - name: Deploy to OTA server
        run: |
            PAYLOAD='{
                "projectName": "ota_update",
                "artifactId": "${{ env.COMPONENT_NAME }}",
                "version": "${{ needs.version.outputs.new_version }}",
                "url": "${{ env.GITHUB_REPO }}",
                "updateType": "${{ env.UPDATE_TYPE }}",
                "metadata": '"$(cat metadata.json)"'
            }'
            
            echo "Deploying update to OTA server..."
            
            RESPONSE=$(curl -s -X POST \
                -H "Content-Type: application/json" \
                -d "$PAYLOAD" \
                -w "\n%{http_code}" \
                ${{ env.DEPLOY_API_URL }}/saveArtifact)
            
            HTTP_STATUS=$(echo "$RESPONSE" | tail -n 1)
            RESPONSE_BODY=$(echo "$RESPONSE" | head -n -1)
            
            echo "Response: $RESPONSE_BODY"
            echo "Status code: $HTTP_STATUS"
            
            if [ "$HTTP_STATUS" != "200" ]; then
                echo "Deployment failed"
                exit 1
            fi
            
            echo "Component update deployment successful"
  
      - name: Upload metadata
        uses: actions/upload-artifact@v3
        with:
          name: update-metadata
          path: metadata.json